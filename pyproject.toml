[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "app"
version = "0.1.0"
description = ""
authors = [{ name = "", email = "<support@company.com>" }]
maintainers = [{ name = "", email = "<support@company.com>" }]
readme = "README.md"
# full list of possibilities available at https://pypi.org/classifiers
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Telecommunications Industry",
    # "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: PyPy",
]
requires-python = "==3.11.8"

#==============================================================================#
#               ------- dependencies ------
#==============================================================================#
dependencies = ["pandas", "python-dotenv", "requests"]

[dependency-groups]
dev = ["csv2md", "pre-commit", "snakeviz"]
lint = ["ruff", "yamllint"]
test = ["coverage", "pytest"]

#==============================================================================#
#               ------- tool - commitizen ------
#==============================================================================#
[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "pep440"
version_provider = "uv"
update_changelog_on_bump = true
bump_message = "chore: version bump for $new_version [skip ci]"

#==============================================================================#
#               ------- tool - coverage ------
#==============================================================================#
[tool.coverage.report]
fail_under = 80
format = "markdown"

[tool.coverage.run]
source = "src"
branch = true
omit = ["*/__pycache__/*"]

#==============================================================================#
#               ------- tool - ruff ------
#==============================================================================#
[tool.ruff]
# Number of spaces per indentation level
indent-width = 4
line-length = 160
# Whether to automatically exclude files that are ignored by .gitignore
respect-gitignore = true
target-version = "py311"

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings
docstring-code-format = true
indent-style = "space"
line-ending = "auto"
# Prefer double quotes over single quotes
quote-style = "double"
# Ignore trailing commas used as an indication that short lines should be left separate
skip-magic-trailing-comma = true

[tool.ruff.lint.isort]
case-sensitive = true

#==============================================================================#
#               ------- tool - uv ------
#==============================================================================#
[tool.uv]
## Project
# https://docs.astral.sh/uv/reference/settings/#project-metadata

# List of dependency-groups to install by default
default-groups = ["dev", "lint", "test"]
# List of supported environments against which to resolve dependencies
environments = ["sys_platform == 'linux'"]
# environments = ["sys_platform == 'windows'"]
# Whether the project is managed by uv
managed = true
# List of required platforms, for packages that lack source distributions
required-environments = [
    "sys_platform == 'linux' and platform_machine == 'x86_64'",
]
# required-environments = [
#     "sys_platform == 'windows' and platform_machine == 'x86_64'",
# ]

## Configuration
# https://docs.astral.sh/uv/reference/settings/#configuration

# Compile Python files to bytecode after installation
compile-bytecode = true
# Extra URLs of package indexes to use, in addition to --index-url
# extra-index-url = ["https://download.pytorch.org/whl/cpu"]

# Strategy to use when resolving against multiple index URLs
# Only use results from the first index that returns a match for a given package name
index-strategy = "first-index"
# Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next
# index-strategy = "unsafe-best-match"

# Whether to allow Python downloads.
python-downloads = "automatic"
# Mirror URL for downloading managed Python installations
python-install-mirror = "https://github.com/astral-sh/python-build-standalone/releases/download"
# Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv
python-preference = "managed"
# Enforce a requirement on the version of uv
required-version = ">=0.6.14"
# Strategy to use when selecting between the different compatible versions for a given package requirement
resolution = "highest"

[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple"

[tool.uv.sources]
pypi = { index = "pypi" }
