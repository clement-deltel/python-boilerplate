# pyproject.toml
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml

[build-system]
requires = ["uv_build"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-root = "src"
module-name = ["app_name"]
namespace = true

[project]
name = "app-name"
description = "app-description"
version = "0.0.0"
authors = [{ name = "", email = "support@company.com" }]
maintainers = [{ name = "", email = "support@company.com" }]
readme = "README.md"
# Full list of possibilities available at https://pypi.org/classifiers
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Telecommunications Industry",
    # "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: PyPy",
]
requires-python = ">=3.11.11, <3.12.0"

# ---------------------------------------------------------------------------- #
#               ------- dependencies ------
# ---------------------------------------------------------------------------- #
dependencies = [
    "cloudevents", # https://github.com/cloudevents/sdk-python
    "debugpy",     # https://github.com/microsoft/debugpy
    "numpy",       # https://github.com/numpy/numpy
    # "pandas",        # https://pandas.pydata.org/docs/reference/index.html
    "pika",          # https://pika.readthedocs.io/en/stable/index.html
    "polars",        # https://github.com/pola-rs/polars
    "python-dotenv",
    "requests",      # https://requests.readthedocs.io/en/latest/api
]

[dependency-groups]
dev = ["commitizen", "csv2md", "howdoi", "prek", "pyscn","snakeviz"]
lint = [
    "checkov",
    "isort",
    "pyright",
    "pyupgrade",
    "refurb",
    "ruff",
    "ty",
    "yamllint",
]
observability = ["opentelemetry-distro"]
test = ["coverage", "pytest"]
typing = ["types-requests"]

# ---------------------------------------------------------------------------- #
#               ------- entry-points ------
# ---------------------------------------------------------------------------- #
# [project.entry-points."tasks"]
# "app_name.tasks_definitions" = "app_name.definitions:definitions"
# "app_name.tasks" = "app_name.tasks"

# ---------------------------------------------------------------------------- #
#               ------- scripts ------
# ---------------------------------------------------------------------------- #
[project.scripts]
app_name = "app_name.main:main"

# ---------------------------------------------------------------------------- #
#               ------- tool - commitizen ------
# ---------------------------------------------------------------------------- #
# https://commitizen-tools.github.io/commitizen/config

[tool.commitizen]
name = "cz_conventional_commits"
encoding = "utf-8"
tag_format = "$version"
version_scheme = "pep440"
version_provider = "uv"

update_changelog_on_bump = true
bump_message = "chore: version bump for $new_version [skip ci]"
changelog_file = "CHANGELOG.md"
changelog_incremental = true

# ---------------------------------------------------------------------------- #
#               ------- tool - coverage ------
# ---------------------------------------------------------------------------- #
# https://coverage.readthedocs.io/en/latest/config.html

[tool.coverage.report]
fail_under = 80
format = "markdown"

[tool.coverage.run]
source = "src"
branch = true
omit = ["*/__pycache__/*"]

# ---------------------------------------------------------------------------- #
#               ------- tool - isort ------
# ---------------------------------------------------------------------------- #
# https://pycqa.github.io/isort/docs/configuration/options.html

[tool.isort]
import_heading_future = "Future"
import_heading_stdlib = "Standard Library"
import_heading_thirdparty = "Third-party"
import_heading_firstparty = "Local Application"
import_heading_localfolder = "Local Folder"

case_sensitive = true
include_trailing_comma = true
line_length = 160
# https://pycqa.github.io/isort/docs/configuration/multi_line_output_modes.html
multi_line_output = 3 # vertical-hanging-indent

# ---------------------------------------------------------------------------- #
#               ------- tool - pyright ------
# ---------------------------------------------------------------------------- #
# https://github.com/microsoft/pyright

[tool.pyright]
include = [".githooks", "docker", "src", "test"]
pythonVersion = "3.11"

pythonPlatform = "Linux"
# pythonPlatform = "Windows"

strictListInference = true
strictDictionaryInference = true
strictSetInference = true
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
deprecateTypingAliases = true

typeCheckingMode = "standard"

# ---------------------------------------------------------------------------- #
#               ------- tool - pyscn ------
# ---------------------------------------------------------------------------- #
# https://github.com/ludo-technologies/pyscn

[tool.pyscn]

# Complexity analysis
# -------------------
[tool.pyscn.complexity]
enabled = true                    # Enable complexity analysis
low_threshold = 9                 # Functions with complexity ≤ 9 are low risk
medium_threshold = 19             # Functions with complexity 10-19 are medium risk
                                  # Functions with complexity ≥ 20 are high risk
max_complexity = 0                # Maximum allowed complexity (0 = no limit)
report_unchanged = true           # Report functions with complexity = 1

# Dead code detection
# -------------------
[tool.pyscn.dead_code]
enabled = true                    # Enable dead code detection
min_severity = "warning"          # Minimum severity to report: critical, warning, info
show_context = false              # Show surrounding code context
context_lines = 3                 # Number of context lines to show
sort_by = "severity"              # Sort by: severity, line, file, function

# Detection options - configure what types of dead code to detect
detect_after_return = true        # Code after return statements
detect_after_break = true         # Code after break statements
detect_after_continue = true      # Code after continue statements
detect_after_raise = true         # Code after raise statements
detect_unreachable_branches = true # Unreachable conditional branches

# Patterns to ignore (regex patterns)
ignore_patterns = []

# Clone detection
# ---------------
[tool.pyscn.clones]
# Analysis settings
min_lines = 5                     # Minimum lines for clone candidates
min_nodes = 10                    # Minimum AST nodes for clone candidates
max_edit_distance = 50.0          # Maximum edit distance allowed
ignore_literals = false           # Ignore differences in literal values
ignore_identifiers = false        # Ignore differences in identifier names
cost_model_type = "python"        # Cost model: default, python, weighted

# Threshold settings for clone type classification (0.0 - 1.0)
type1_threshold = 0.95            # Type-1: Identical code (except whitespace/comments)
type2_threshold = 0.85            # Type-2: Syntactically identical (different identifiers)
type3_threshold = 0.80            # Type-3: Syntactically similar (small modifications)
type4_threshold = 0.75            # Type-4: Functionally similar (different syntax)
similarity_threshold = 0.8        # General minimum similarity threshold

# Filtering settings
min_similarity = 0.0              # Minimum similarity to report
max_similarity = 1.0              # Maximum similarity to report
enabled_clone_types = ["type1", "type2", "type3", "type4"] # Clone types to detect
max_results = 0                   # Maximum results (0 = no limit)

# Grouping settings
# Grouping strategy:
#   - connected: Group by transitive similarity (simple, fast, default)
#   - star: Star-based grouping around centroids
#   - complete_linkage: Hierarchical clustering (high quality)
#   - k_core: K-core decomposition (balanced quality/performance)
grouping_mode = "connected"
grouping_threshold = 0.85         # Minimum similarity for group membership
k_core_k = 2                      # K value for k-core mode (minimum connections per node)

# LSH acceleration settings
lsh_enabled = "auto"              # LSH acceleration: true, false, auto (based on project size)
lsh_auto_threshold = 500          # Enable LSH for 500+ fragments
lsh_similarity_threshold = 0.50   # LSH similarity threshold
lsh_bands = 32                    # Number of LSH bands
lsh_rows = 4                      # Rows per LSH band
lsh_hashes = 128                  # MinHash function count

# Performance settings
max_memory_mb = 100               # Memory limit in MB
batch_size = 100                  # Batch size for processing
enable_batching = true            # Enable batching
max_goroutines = 4                # Maximum concurrent goroutines
timeout_seconds = 300             # Timeout in seconds (5 minutes)

# Input settings
paths = ["src/"]                  # Paths to analyze (empty = use command line)
recursive = true                  # Recursively analyze directories
include_patterns = ["*.py"]       # File patterns to include
exclude_patterns = ["test_*.py", "*_test.py"] # File patterns to exclude

# Output settings
format = "json"                   # Output format: text, json, yaml, csv, html
show_details = false              # Show detailed clone information
show_content = false              # Include source code content in output
sort_by = "similarity"            # Sort by: similarity, size, location, type
group_clones = true               # Group related clones together

# Example configuration
# ---------------------
# Uncomment and modify these settings for common use cases:

# # Strict mode - high precision (uncomment and add to [clones] section)
# # similarity_threshold = 0.95
# # enabled_clone_types = ["type1", "type2"]
#
# # Relaxed mode - catch more potential clones
# # similarity_threshold = 0.7
# # min_lines = 3
#
# # Performance optimized for large codebases
# # lsh_enabled = "true"
# # max_goroutines = 8
# # batch_size = 200

# ---------------------------------------------------------------------------- #
#               ------- tool - refurb ------
# ---------------------------------------------------------------------------- #
# https://pypi.org/project/refurb

[tool.refurb]
ignore = [
    "FURB107", # use-with-suppress
]

# ---------------------------------------------------------------------------- #
#               ------- tool - ruff ------
# ---------------------------------------------------------------------------- #
# https://docs.astral.sh/ruff

[tool.ruff]
# Number of spaces per indentation level
indent-width = 4
line-length = 160
# Whether to automatically exclude files that are ignored by .gitignore
respect-gitignore = true
target-version = "py311"

[tool.ruff.format]
# https://docs.astral.sh/ruff/formatter
# Like Black, use double quotes over single quotes for strings
quote-style = "double"
# Like Black, indent with spaces, rather than tabs
indent-style = "space"
# Like Black, automatically detect the correct line ending.
line-ending = "auto"

# Enable reformatting of code snippets in docstrings
docstring-code-format = true
# Ignore trailing commas used as an indication that short lines should be left separate
skip-magic-trailing-comma = true

[tool.ruff.lint]
# https://docs.astral.sh/ruff/linter
select = [
    "ERA",  # eradicate
    "S",    # flake8-bandit
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "I",    # isort
    "PD",   # pandas-vet
    "N",    # pep8-naming
    "PERF", # perflint
    "E",    # pycodestyle
    "D",    # pydocstyle
    "F",    # Pyflakes
    "PL",   # Pylint
    "UP",   # pyupgrade
    "FURB", # refurb
    "RUF",  # Ruff-specific rules
]

# Lint rules in conflict with the formatter: COM812, COM819, D206, D300, E111, E114, E117, Q000, Q001, Q002, Q003
ignore = [
    "COM812", # missing-trailing-comma
    "COM819", # prohibited-trailing-comma
    "D206",   # docstring-tab-indentation
    "D300",   # triple-single-quotes
    "E111",   # indentation-with-invalid-multiple
    "E114",   # indentation-with-invalid-multiple-comment
    "E117",   # over-indented
    "Q000",   # bad-quotes-inline-string
    "Q001",   # bad-quotes-multiline-string
    "Q002",   # bad-quotes-docstring
    "Q003",   # avoidable-escaped-quote
    # ------#
    "D203",    # incorrect-blank-line-before-class
    "D213",    # multi-line-summary-second-line
    "PLR0913", # too-many-arguments
    "PLW0603", # global-statement
]

[tool.ruff.lint.isort]
# https://docs.astral.sh/ruff/settings/#lintisort
case-sensitive = true
split-on-trailing-comma = false

[tool.ruff.lint.pydocstyle]
# https://docs.astral.sh/ruff/settings/#lintpydocstyle

# Whether to use Google-style, NumPy-style conventions, or the PEP 257 defaults when analyzing docstring sections
convention = "google"
# Ignore missing documentation for *args and **kwargs parameters.
ignore-var-parameters = true

# ---------------------------------------------------------------------------- #
#               ------- tool - ty ------
# ---------------------------------------------------------------------------- #
# https://github.com/astral-sh/ty/blob/main/docs/configuration.md

[tool.ty.environment]
# Path to the Python installation from which ty resolves type information and third-party dependencies
python = "./.venv"
# Tailor type stubs and conditionalized type definitions
python-platform = "linux"
# python-platform = "win32"
# Version of Python that will be used to analyze the source code
python-version = "3.11"

[tool.ty.src]
include = [".githooks", "docker", "src", "test"]
# Exclude files that are ignored by .ignore, .gitignore, .git/info/exclude, and global gitignore files
respect-ignore-files = true

[tool.ty.terminal]
# Format to use for printing diagnostic messages
output-format = "full"

[tool.ty.rules]
# https://github.com/astral-sh/ruff/blob/main/crates/ty/docs/rules.md
index-out-of-bounds = "ignore"

# ---------------------------------------------------------------------------- #
#               ------- tool - uv ------
# ---------------------------------------------------------------------------- #
[tool.uv]
## Project
# https://docs.astral.sh/uv/reference/settings/#project-metadata

# List of dependency-groups to install by default
default-groups = ["dev", "lint", "observability", "test", "typing"]
# List of supported environments against which to resolve dependencies
environments = ["sys_platform == 'linux'"]
# environments = ["sys_platform == 'windows'"]
# Whether the project is managed by uv
managed = true
# List of required platforms, for packages that lack source distributions
required-environments = [
    "sys_platform == 'linux' and platform_machine == 'x86_64'",
]
# required-environments = [
#     "sys_platform == 'windows' and platform_machine == 'x86_64'",
# ]

## Configuration
# https://docs.astral.sh/uv/reference/settings/#configuration

# Compile Python files to bytecode after installation
compile-bytecode = true
# Extra URLs of package indexes to use, in addition to --index-url
# extra-index-url = ["https://download.pytorch.org/whl/cpu"]

# Strategy to use when resolving against multiple index URLs
# Only use results from the first index that returns a match for a given package name
index-strategy = "first-index"
# Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next
# index-strategy = "unsafe-best-match"

# Whether to allow Python downloads.
python-downloads = "automatic"
# Mirror URL for downloading managed Python installations
python-install-mirror = "https://github.com/astral-sh/python-build-standalone/releases/download"
# Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv
python-preference = "managed"
# Enforce a requirement on the version of uv
required-version = ">=0.8.18"
# Strategy to use when selecting between the different compatible versions for a given package requirement
resolution = "highest"

[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple"

[tool.uv.sources]
pypi = { index = "pypi" }
