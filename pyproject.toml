# pyproject.toml
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/app"]

[project]
name = "app"
description = "app"
version = "0.1.0"
authors = [{ name = "", email = "support@company.com" }]
maintainers = [{ name = "", email = "support@company.com" }]
readme = "README.md"
# Full list of possibilities available at https://pypi.org/classifiers
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Telecommunications Industry",
    # "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: PyPy",
]
requires-python = "==3.11.8"

#------------------------------------------------------------------------------#
#               ------- dependencies ------
#------------------------------------------------------------------------------#
dependencies = ["hatchling", "pandas", "python-dotenv", "requests"]

[dependency-groups]
dev = ["commitizen", "csv2md", "pre-commit", "snakeviz"]
lint = ["mypy", "ruff", "ty", "types-requests", "yamllint"]
test = ["coverage", "pytest"]

#------------------------------------------------------------------------------#
#               ------- scripts ------
#------------------------------------------------------------------------------#
[project.scripts]
app = "app.main:main"

#------------------------------------------------------------------------------#
#               ------- tool - commitizen ------
#------------------------------------------------------------------------------#
# https://commitizen-tools.github.io/commitizen/config

[tool.commitizen]
name = "cz_conventional_commits"
encoding = "utf-8"
tag_format = "$version"
version_scheme = "pep440"
version_provider = "uv"

update_changelog_on_bump = true
bump_message = "chore: version bump for $new_version [skip ci]"
changelog_file = "CHANGELOG.md"
changelog_imcremental = true

#------------------------------------------------------------------------------#
#               ------- tool - coverage ------
#------------------------------------------------------------------------------#
# https://coverage.readthedocs.io/en/latest/config.html

[tool.coverage.report]
fail_under = 80
format = "markdown"

[tool.coverage.run]
source = "src"
branch = true
omit = ["*/__pycache__/*"]

#------------------------------------------------------------------------------#
#               ------- tool - ruff ------
#------------------------------------------------------------------------------#
# https://docs.astral.sh/ruff

[tool.ruff]
# Number of spaces per indentation level
indent-width = 4
line-length = 160
# Whether to automatically exclude files that are ignored by .gitignore
respect-gitignore = true
target-version = "py311"

[tool.ruff.format]
# https://docs.astral.sh/ruff/formatter
# Like Black, use double quotes over single quotes for strings
quote-style = "double"
# Like Black, indent with spaces, rather than tabs
indent-style = "space"
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable reformatting of code snippets in docstrings
docstring-code-format = true
# Ignore trailing commas used as an indication that short lines should be left separate
skip-magic-trailing-comma = true

[tool.ruff.lint]
# https://docs.astral.sh/ruff/linter
select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "G",   # flake8-logging-format
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "I",   # isort
    "PD",  # pandas-vet
    "N",   # pep8-naming
    "E",   # pycodestyle
    "D",   # pydocstyle
    "F",   # Pyflakes
    "PL",  # Pylint
]

# Lint rules in conflict with the formatter: D206, D300, E111, E114, E117, Q000, Q001, Q002, Q003
ignore = [
    "D203",    # incorrect-blank-line-before-class
    "D206",    # docstring-tab-indentation
    "D213",    # multi-line-summary-second-line
    "D300",    # triple-single-quotes
    "E111",    # indentation-with-invalid-multiple
    "E114",    # indentation-with-invalid-multiple-comment
    "E117",    # over-indented
    "E501",    # line-too-long
    "PLR0913", # too-many-arguments
    "PLW0603", # global-statement
    "Q000",    # bad-quotes-inline-string
    "Q001",    # bad-quotes-multiline-string
    "Q002",    # bad-quotes-docstring
    "Q003",    # avoidable-escaped-quote
]

[tool.ruff.lint.isort]
case-sensitive = true
split-on-trailing-comma = false

#------------------------------------------------------------------------------#
#               ------- tool - ty ------
#------------------------------------------------------------------------------#
# https://github.com/astral-sh/ty/blob/main/docs/configuration.md

[tool.ty]
# Exclude files that are ignored by .ignore, .gitignore, .git/info/exclude, and global gitignore files
respect-ignore-files = true

[tool.ty.environment]
# Path to the Python installation from which ty resolves type information and third-party dependencies
python = "./.venv"
# Tailor type stubs and conditionalized type definitions
python-platform = "linux"
# python-platform = "win32"
# Version of Python that will be used to analyze the source code
python-version = "3.11"

[tool.ty.terminal]
# Format to use for printing diagnostic messages
output-format = "full"

[tool.ty.rules]
# https://github.com/astral-sh/ruff/blob/main/crates/ty/docs/rules.md
index-out-of-bounds = "ignore"

#------------------------------------------------------------------------------#
#               ------- tool - uv ------
#------------------------------------------------------------------------------#
[tool.uv]
## Project
# https://docs.astral.sh/uv/reference/settings/#project-metadata

# List of dependency-groups to install by default
default-groups = ["dev", "lint", "test"]
# List of supported environments against which to resolve dependencies
environments = ["sys_platform == 'linux'"]
# environments = ["sys_platform == 'windows'"]
# Whether the project is managed by uv
managed = true
# List of required platforms, for packages that lack source distributions
required-environments = [
    "sys_platform == 'linux' and platform_machine == 'x86_64'",
]
# required-environments = [
#     "sys_platform == 'windows' and platform_machine == 'x86_64'",
# ]

## Configuration
# https://docs.astral.sh/uv/reference/settings/#configuration

# Compile Python files to bytecode after installation
compile-bytecode = true
# Extra URLs of package indexes to use, in addition to --index-url
# extra-index-url = ["https://download.pytorch.org/whl/cpu"]

# Strategy to use when resolving against multiple index URLs
# Only use results from the first index that returns a match for a given package name
index-strategy = "first-index"
# Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next
# index-strategy = "unsafe-best-match"

# Whether to allow Python downloads.
python-downloads = "automatic"
# Mirror URL for downloading managed Python installations
python-install-mirror = "https://github.com/astral-sh/python-build-standalone/releases/download"
# Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv
python-preference = "managed"
# Enforce a requirement on the version of uv
required-version = ">=0.7.8"
# Strategy to use when selecting between the different compatible versions for a given package requirement
resolution = "highest"

[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple"

[tool.uv.sources]
pypi = { index = "pypi" }
